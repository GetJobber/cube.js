/**
 * @title @cubejs-client/react
 * @permalink /@cubejs-client-react
 * @menuCategory Cube.js Frontend
 * @subcategory Reference
 * @menuOrder 3
 * @description `@cubejs-client/react` provides React Components for easy Cube.js integration in a React app.
 */

declare module '@cubejs-client/react' {
  import * as React from 'react';
  import { CubejsApi, Query, ResultSet, Filter } from '@cubejs-client/core';

  type CubeProviderVariables = {
    cubejsApi: CubejsApi;
    children: React.ReactNode;
  }
  
  export const CubeProvider: React.FC<CubeProviderVariables>
  
  export type QueryRendererRenderProp = {
    resultSet: ResultSet | null;
    error: Error | null;
    loadingState: { isLoading: boolean };
  };

  export type QueryRendererProps = {
    /**
     * Analytic query. [Learn more about it's format](query-format)
     */
    query: Query;
    queries?: { [key: string]: Query };
    /**
     * Indicates whether the generated by `Cube.js ` SQL Code should be requested. See [rest-api#sql](rest-api#api-reference-v-1-sql). When set to `only` 
     */
    loadSql?: 'only' | boolean;
    resetResultSetOnChange?: boolean;
    updateOnlyOnStateChange?: boolean;
    /**
     * `CubejsApi` instance to use
     */
    cubejsApi: CubejsApi;
    /**
     * Output of this function will be rendered by the `QueryRenderer`
     */
    render: (QueryRendererRenderProp) => void;
  };

  /**
   * `<QueryRenderer />` a react component that accepts a query, fetches the given query, and uses the render prop to render the resulting data
   * @noInheritDoc
   */
  export class QueryRenderer extends React.Component<QueryRendererProps> {}

  type ChartType = 'line' | 'bar' | 'table' | 'area';

  type VizState = { [key: string]: any };
  
  type QueryBuilderProps = {
    /**
     * `CubejsApi` instance to use
     */
    cubejsApi: CubejsApi;
    /**
     * Default query
     */
    query?: Query;
    /**
     * @default defaultChartType line
     */
    vizState: VizState;
    defaultChartType: ChartType;
    disableHeuristics: boolean;
    wrapWithQueryRenderer: boolean;
    render: (renderProps: QueryBuilderRenderProps) => React.ReactNode;
    /**
     * todo: wip
     */
    stateChangeHeuristics: () => any;
    /**
     * Called by the `QueryBuilder` when the query state has changed. Use it when state is maintained outside of the `QueryBuilder` component.
     */
    setQuery: (query: Query) => void;
    setVizState: (vizState: VizState) => void;
  };

  export type QueryBuilderRenderProps = {
    /**
     * Indicates whether the query is ready to be displayed or not
     */
    isQueryPresent: boolean;
    measures: string[];
    dimensions: string[];
    segments: string[];
    timeDimensions: Filter[];

    availableMeasures: TAvailableMeasure[];
    availableDimensions: TAvailableDimension[];
    availableTimeDimensions: TAvailableDimension[];
    availableSegments: TMember[];

    updateMeasures: MemberUpdater;
    updateDimensions: MemberUpdater;
    updateSegments: MemberUpdater;
    updateTimeDimensions: MemberUpdater;
    /**
     * Used for partial of full query update
     */
    updateQuery: (query: Query) => void;
  };

  /**
   * `<QueryBuilder />` is used to build interactive analytics query builders. It abstracts state management and API calls to Cube.js Backend. It uses render prop technique and doesnâ€™t render anything itself, but calls the render function instead.
   * @noInheritDoc
   */
  export class QueryBuilder extends React.Component<QueryBuilderProps> {}
    
  export function useCubeQuery<TData>(
    query: Query,
    options?: UseCubeQueryOptions,
  ): UseCubeQueryResult<TData>;
  
  export type UseCubeQueryOptions = {
    /**
     * A `CubejsApi` instance to use. Taken from the context if not passed
     */
    cubejsApi?: CubejsApi;
    /**
     * Query execution will be skipped when `skip` is set to `true`. You can use this flag to avoid sending incomplete queries.
     */
    skip?: boolean;
    /**
     * When `true` the resultSet will be reset to `null` first
     */
    subscribe?: boolean;
    resetResultSetOnChange?: boolean;
  }
  
  export type UseCubeQueryResult<TData> = {
    error: Error | null;
    isLoading: boolean;
    resultSet: ResultSet<TData> | null;
  }

  /**
   * Checks whether the query is ready
   */
  export function isQueryPresent(query: Query): boolean;
  
  export type TMember = {
    name: string;
    title: string;
    shortTitle: string;
  };

  export type TMemberType = {
    type: 'time' | 'number' | 'string' | 'boolean';
  };

  export type TAvailableMeasure = TMember &
    TMemberType & {
      drillMembers: string[];
      drillMembersGrouped: {
        measures: TMember[];
        dimensions: TMember[];
      };
    };

  export type TAvailableDimension = TMember &
    TMemberType & {
      suggestFilterValues: boolean;
    };

  export type MemberUpdater = {
    add: (member: TMember) => void;
    remove: (member: TMember) => void;
    update: (member: TMember, updateWith: TMember) => void;
  };
  
  /**
   * @example updateMeasures example
   * @link https://google.com
   * Just a code example:
   * ```js
   * const greeting = 'Hello, World!';
   * ```
   */
}
