/**
 * @title @cubejs-client/react
 * @permalink /@cubejs-client-react
 * @menuCategory Cube.js Frontend
 * @subcategory Reference
 * @menuOrder 3
 * @description `@cubejs-client/react` provides React Components for easy Cube.js integration in a React app.
 */

import * as React from 'react';
import { CubejsApi, Query, ResultSet, Filter } from '@cubejs-client/core';

declare module '@cubejs-client/react' {
  type CubeProviderVariables = {
    cubejsApi: CubejsApi;
    children: React.ReactNode;
  };

  export const CubeProvider: React.FC<CubeProviderVariables>;

  type QueryRendererRenderProp = {
    resultSet: ResultSet | null;
    error: Error | null;
    loadingState: { isLoading: boolean };
  };

  type QueryRendererProps = {
    /**
     * Analytic query. [Learn more about it's format](query-format)
     */
    query: Query;
    queries?: { [key: string]: Query };
    /**
     * Indicates whether the generated by `Cube.js` SQL Code should be requested. See [rest-api#sql](rest-api#api-reference-v-1-sql). When set to `only`
     */
    loadSql?: 'only' | boolean;
    resetResultSetOnChange?: boolean;
    updateOnlyOnStateChange?: boolean;
    /**
     * `CubejsApi` instance to use
     */
    cubejsApi: CubejsApi;
    /**
     * Output of this function will be rendered by the `QueryRenderer`
     */
    render: (QueryRendererRenderProp) => void;
  };

  /**
   * `<QueryRenderer />` a react component that accepts a query, fetches the given query, and uses the render prop to render the resulting data
   * @noInheritDoc
   */
  export class QueryRenderer extends React.Component<QueryRendererProps> {}

  type ChartType = 'line' | 'bar' | 'table' | 'area';

  type VizState = { [key: string]: any };

  type QueryBuilderProps = {
    /**
     * `CubejsApi` instance to use
     */
    cubejsApi: CubejsApi;
    /**
     * Default query
     */
    query?: Query;
    /**
     * @default defaultChartType line
     */
    vizState: VizState;
    defaultChartType: ChartType;
    disableHeuristics: boolean;
    wrapWithQueryRenderer: boolean;
    render: (renderProps: QueryBuilderRenderProps) => React.ReactNode;
    /**
     * todo: wip
     */
    stateChangeHeuristics: () => any;
    /**
     * Called by the `QueryBuilder` when the query state has changed. Use it when state is maintained outside of the `QueryBuilder` component.
     */
    setQuery: (query: Query) => void;
    setVizState: (vizState: VizState) => void;
  };

  type QueryBuilderRenderProps = {
    /**
     * Indicates whether the query is ready to be displayed or not
     */
    isQueryPresent: boolean;
    measures: string[];
    dimensions: string[];
    segments: string[];
    timeDimensions: Filter[];

    /**
     * An array of available measures to select. They are loaded via the API from Cube.js Backend.
     */
    availableMeasures: TAvailableMeasure[];
    /**
     * An array of available dimensions to select. They are loaded via the API from Cube.js Backend.
     */
    availableDimensions: TAvailableDimension[];
    /**
     * An array of available time dimensions to select. They are loaded via the API from Cube.js Backend.
     */
    availableTimeDimensions: TAvailableDimension[];
    /**
     * An array of available segments to select. They are loaded via the API from Cube.js Backend.
     */
    availableSegments: TMember[];

    updateMeasures: MemberUpdater;
    updateDimensions: MemberUpdater;
    updateSegments: MemberUpdater;
    updateTimeDimensions: MemberUpdater;
    /**
     * Used for partial of full query update
     */
    updateQuery: (query: Query) => void;
  };

  /**
   * `<QueryBuilder />` is used to build interactive analytics query builders. It abstracts state management and API calls to Cube.js Backend. It uses render prop technique and doesnâ€™t render anything itself, but calls the render function instead.
   *
   * Example: **orderMembers**
   * ```js
   * // Ex: `orderMembers`
   * // [
   * //   {
   * //     id: 'Users.country',
   * //     title: 'Users Country',
   * //     order: 'desc'
   * //   },
   * //   //...
   * // ]
   *
   * import React from 'react';
   * import ReactDOM from 'react-dom';
   * import { Button, Layout, Divider, Empty, Select, Row, Col } from 'antd';
   * import { QueryBuilder } from '@cubejs-client/react';
   * import cubejs from '@cubejs-client/core';
   * import 'antd/dist/antd.css';
   *
   * import ChartRenderer from './ChartRenderer';
   *
   * const API_URL = 'https://react-dashboard.cubecloudapp.dev';
   * const CUBEJS_TOKEN =
   *   'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. * eyJpYXQiOjE1OTE3MDcxNDgsImV4cCI6MTU5NDI5OTE0OH0. * n5jGLQJ14igg6_Hri_Autx9qOIzVqp4oYxmX27V-4T4';
   *
   * const cubejsApi = cubejs(CUBEJS_TOKEN, {
   *   apiUrl: `${API_URL}/cubejs-api/v1`,
   * });
   *
   * const App = () => {
   *   return (
   *     <QueryBuilder
   *       query={{
   *         measures: ['Orders.count'],
   *         timeDimensions: [
   *           {
   *             dimension: 'Orders.createdAt',
   *             granularity: 'month',
   *             dateRange: ['2016-01-01', '2016-12-31'],
   *           },
   *         ],
   *       }}
   *       cubejsApi={cubejsApi}
   *       render={({ resultSet, measures, orderMembers, updateOrder }) => {
   *         return (
   *           <Layout.Content style={{ padding: 20 }}>
   *             {orderMembers.map((orderMember, index) => (
   *               <Row gutter={[8, 16]} align="middle">
   *                 <Col span={6}>{orderMember.title}</Col>
   *
   *                 <Col>
   *                   <Select
   *                     value={orderMember.order}
   *                     placeholder="Select order"
   *                     onSelect={(order) => updateOrder.set(orderMember.id,  * order)}
   *                   >
   *                     {['none', 'asc', 'desc'].map((order) => (
   *                       <Select.Option key={order} value={order}>
   *                         {order}
   *                       </Select.Option>
   *                     ))}
   *                   </Select>
   *                 </Col>
   *
   *                 <Col>
   *                   <Button
   *                     onClick={() => {
   *                       index - 1 >= 0 && updateOrder.reorder(index, index - 1);
   *                     }}
   *                   >
   *                     Move up
   *                   </Button>
   *
   *                   <Button
   *                     onClick={() => {
   *                       index + 1 < orderMembers.length &&
   *                         updateOrder.reorder(index, index + 1);
   *                     }}
   *                   >
   *                     Move down
   *                   </Button>
   *                 </Col>
   *               </Row>
   *             ))}
   *             <Divider />
   *             {measures.length > 0 ? (
   *               <ChartRenderer resultSet={resultSet} />
   *             ) : (
   *               <Empty description="Select measure or dimension to get started"  * />
   *             )}
   *           </Layout.Content>
   *         );
   *       }}
   *     />
   *   );
   * };
   *
   * const rootElement = document.getElementById('root');
   * ReactDOM.render(<App />, rootElement);
   * ```
   * @noInheritDoc
   */
  export class QueryBuilder extends React.Component<QueryBuilderProps> {}

  export function useCubeQuery<TData>(query: Query, options?: UseCubeQueryOptions): UseCubeQueryResult<TData>;

  type UseCubeQueryOptions = {
    /**
     * A `CubejsApi` instance to use. Taken from the context if the param is not passed
     */
    cubejsApi?: CubejsApi;
    /**
     * Query execution will be skipped when `skip` is set to `true`. You can use this flag to avoid sending incomplete queries.
     */
    skip?: boolean;
    /**
     * When `true` the resultSet will be reset to `null` first
     */
    subscribe?: boolean;
    resetResultSetOnChange?: boolean;
  };

  type UseCubeQueryResult<TData> = {
    error: Error | null;
    isLoading: boolean;
    resultSet: ResultSet<TData> | null;
  };

  /**
   * Checks whether the query is ready
   */
  export function isQueryPresent(query: Query): boolean;

  type TMember = {
    name: string;
    title: string;
    shortTitle: string;
  };

  type TMemberType = {
    type: 'time' | 'number' | 'string' | 'boolean';
  };

  type TAvailableMeasure = TMember &
    TMemberType & {
      drillMembers: string[];
      drillMembersGrouped: {
        measures: TMember[];
        dimensions: TMember[];
      };
    };

  type TAvailableDimension = TMember &
    TMemberType & {
      suggestFilterValues: boolean;
    };

  type MemberUpdater = {
    add: (member: TMember) => void;
    remove: (member: TMember) => void;
    update: (member: TMember, updateWith: TMember) => void;
  };
}
